SET(PROTO_SRC el.proto elmaster.proto ellet.proto)
SET(PROTOC ${PROJECT_SOURCE_DIR}/thirdparty/bin/protoc)
SET(PROTOC_C_OUT_FLAG --cpp_out)
SET(PROTO_GEN_DIR ${CMAKE_CURRENT_BINARY_DIR})
MESSAGE(STATUS "PROTOC = ${PROTOC}")
FOREACH(PROTO_FILE ${PROTO_SRC})
  GET_FILENAME_COMPONENT(PROTO_NAME ${PROTO_FILE} NAME_WE)
  SET(CUR_PROTO_GEN
     ${PROTO_GEN_DIR}/${PROTO_NAME}.pb.h
     ${PROTO_GEN_DIR}/${PROTO_NAME}.pb.cc
  )
  if (${PROTO_NAME} STREQUAL "elmaster")
    SET(MASTER_SRC ${CUR_PROTO_GEN})
  elseif (${PROTO_NAME} STREQUAL "ellet")
    SET(AGENT_SRC ${CUR_PROTO_GEN})
  else()
    SET(COMMON_SRC 
        ${COMMON_SRC} 
        ${CUR_PROTO_GEN}
        )
    endif()

  SET(PROTO_GEN
     ${PROTO_GEN}
     ${CUR_PROTO_GEN}
  )
  MESSAGE(STATUS "CUR_PROTO_GEN = ${CUR_PROTO_GEN}")
  ADD_CUSTOM_COMMAND(
    OUTPUT ${CUR_PROTO_GEN}
    COMMAND ${PROTOC} ${PROTO_FILE} ${PROTOC_C_OUT_FLAG} ${PROTO_GEN_DIR}
            -I.
    DEPENDS ${PROTOC} ${PROTO_FILE}
    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
  )
ENDFOREACH(PROTO_FILE ${PROTO_SRC})
ADD_LIBRARY(elmaster_pb STATIC ${MASTER_SRC} ${COMMON_SRC})
TARGET_LINK_LIBRARIES(elmaster_pb protobuf)
ADD_LIBRARY(ellet_pb STATIC ${AGENT_SRC} ${COMMON_SRC})
TARGET_LINK_LIBRARIES(ellet_pb protobuf)
